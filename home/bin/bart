#!/usr/bin/python

"""
BART departure times from the command line. Use it like this:

bart # departure times for Powell St, POWL
bart 24th # departure times for 24th and Mission
bart nbrk # departure times for North Berkeley
"""

import sys
import optparse
from xml.dom import minidom
import urllib2

#XXX we're not actually using this
_abbr_to_name = \
{u'12TH': u'12th St. Oakland City Center',
 u'16TH': u'16th St. Mission',
 u'19TH': u'19th St. Oakland',
 u'24TH': u'24th St. Mission',
 u'ASHB': u'Ashby',
 u'BALB': u'Balboa Park',
 u'BAYF': u'Bay Fair',
 u'CAST': u'Castro Valley',
 u'CIVC': u'Civic Center',
 u'COLM': u'Colma',
 u'COLS': u'Coliseum/Oakland Airport',
 u'CONC': u'Concord',
 u'DALY': u'Daly City',
 u'DBRK': u'Downtown Berkeley',
 u'DELN': u'El Cerrito del Norte',
 u'DUBL': u'Dublin/Pleasanton',
 u'EMBR': u'Embarcadero',
 u'FRMT': u'Fremont',
 u'FTVL': u'Fruitvale',
 u'GLEN': u'Glen Park',
 u'HAYW': u'Hayward',
 u'LAFY': u'Lafayette',
 u'LAKE': u'Lake Merritt',
 u'MCAR': u'MacArthur',
 u'MLBR': u'Millbrae',
 u'MONT': u'Montgomery St.',
 u'NBRK': u'North Berkeley',
 u'NCON': u'North Concord/Martinez',
 u'ORIN': u'Orinda',
 u'PHIL': u'Pleasant Hill',
 u'PITT': u'Pittsburg/Bay Point',
 u'PLZA': u'El Cerrito Plaza',
 u'POWL': u'Powell St.',
 u'RICH': u'Richmond',
 u'ROCK': u'Rockridge',
 u'SANL': u'San Leandro',
 u'SBRN': u'San Bruno',
 u'SFIA': u"San Francisco Int'l Airport",
 u'SHAY': u'South Hayward',
 u'SSAN': u'South San Francisco',
 u'UCTY': u'Union City',
 u'WCRK': u'Walnut Creek',
 u'WOAK': u'West Oakland'}

SHARED_BART_API_KEY = 'MW9S-E7SL-26DU-VV8V'

def get_etd_url(station):
    return "http://api.bart.gov/api/etd.aspx?cmd=etd&orig=%s&key=%s" \
           % (station, SHARED_BART_API_KEY)

def unpack_text(element, tagname):
    """XML is insane."""
    return element.getElementsByTagName(tagname)[0].firstChild.data

def convert_eta(eta_str):
    return int(eta_str) if eta_str != 'Leaving' else 0

def lookup_status(station):
    doc = urllib2.urlopen(get_etd_url(station))
    try:
        dom = minidom.parse(doc)
    finally:
        doc.close()

    errors = dom.documentElement.getElementsByTagName('error')
    if errors:
        raise Exception(unpack_text(errors[0], 'text'), unpack_text(errors[0], 'details'))

    timestamp = unpack_text(dom.documentElement, 'time')
    station_name = unpack_text(dom.documentElement.getElementsByTagName('station')[0], 'name')
    dest_to_status = {}
    for etd_tag in dom.documentElement.getElementsByTagName('etd'):
        dest = unpack_text(etd_tag, 'destination')
        etas = [
            convert_eta(unpack_text(estimate, 'minutes'))
            for estimate
            in etd_tag.getElementsByTagName('estimate')
        ]
        dest_to_status[dest] = etas
    return timestamp, station_name, dest_to_status

def main():
    parser = optparse.OptionParser(usage="usage: %prog STATION")
    (_options, args) = parser.parse_args()

    station = args[0].upper() if len(args) > 0 else 'POWL'
    timestamp, station_name, dest_to_status = lookup_status(station)

    # padding was eklitzke's idea. thanks!
    max_dest_len = max(len(dest) for dest in dest_to_status.iterkeys())
    print "Departure times for %s (as of %s)" % (station_name,timestamp)
    for dest, times in dest_to_status.iteritems():
        print "%-*s  %s" % (max_dest_len, dest, " mins, ".join(str(time) for time in times) + " mins")
    return 0

if __name__ == '__main__':
    sys.exit(main())
